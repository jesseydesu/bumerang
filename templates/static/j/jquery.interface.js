var ie = jQuery.browser.msie,ieV = jQuery.browser.version,ie6 = ie&&(ieV == 6),ltie7 = ie&&(ieV <= 7),ltie8 = ie&&(ieV <= 8);function setPie(selectors){	jQuery(selectors).css("behavior", "url(j/PIE.htc)")};function unsetPie(selectors){	jQuery(selectors).css("behavior", "none")};function resetPie(selectors){	unsetPie(selectors);	setPie(selectors);};var cropText = function(txtElement, container_to_fit, widthLimit){	var txt = txtElement.get(0).innerHTML;	var i=0;	if(container_to_fit.width() > widthLimit){		while (container_to_fit.width() > widthLimit){			txt = txt.substr(0,txt.length - 1)			txtElement.html(txt+'...');			i++;			if (i > 100) {				break;			}		}	}		if(txtElement.width() > 0){		container_to_fit.get(0).style.width = widthLimit + 'px';	}}function getPopup(link, popId) {	var pop = $("#" + popId);	var lnk = $(link);	var close = pop.find('.b-popup__close');		if (lnk.hasClass("act")) {		lnk.removeClass("act");		$('#tint').hide();		pop.hide();		removeEvent(document, "click", popClickFunc)	}	else {		if (popBlock != null && popLnk != null) {			$(popBlock).hide();			$(popLnk).removeClass("act");			removeEvent(document, "click", popClickFunc);		}		lnk.addClass("act");		$('#tint').addClass('l-tint_popup');		$('#tint').show();		pop.css('margin-left', - pop.width() / 2 + 'px');		pop.show();		popLnk = link;		popBlock = pop.get(0);		popClose = close.get(0);		addEvent(document, 'click', popClickFunc);	}	return false;}var popLnk, popBlock, popClose;function popClickFunc(event) {	var event = event || window.event;	var t = event.target || event.srcElement;	if (t != popLnk && !isChildNode(popLnk, t) && (t == popClose || isChildNode(popClose, t) || !isChildNode(popBlock, t))) {		$(popBlock).hide();		$('#tint').hide();		$('#tint').removeClass('l-tint_popup');		$(popLnk).removeClass("act");		removeEvent(document, "click", popClickFunc);	}	return false;}function addEvent(obj, type, fn) {	if (obj.addEventListener)		obj.addEventListener(type, fn, false);	else if (obj.attachEvent)		obj.attachEvent( "on"+type, fn );}function removeEvent(obj, type, fn) {	if (obj.removeEventListener)		obj.removeEventListener(type, fn, false);	else if (obj.detachEvent)		obj.detachEvent( "on"+type, fn );}function isChildNode(elem, sell) {	for (var childItem in elem.childNodes) {		if (elem.childNodes[childItem].nodeType == 1) {			if (elem.childNodes[childItem] == sell)				return true;			else if (isChildNode(elem.childNodes[childItem], sell))				return true;		}	}	return false;}jQuery.fn.customInput = function(){	$(this).each(function(i){			if($(this).is('[type=checkbox],[type=radio]')){			var input = $(this);			// get the associated label using the input's id			var label = $('label[for='+input.attr('id')+']');						label.append('<i></i>');			//get type, for classname suffix 			var inputType = (input.is('[type=checkbox]')) ? 'checkbox' : 'radio';			// wrap the input + label in a div			$('<div class="custom-'+ inputType +'"></div>').insertBefore(input).append(input, label);			// find all inputs in this set using the shared name attribute			var allInputs = $('input[name='+input.attr('name')+']');			// necessary for browsers that don't support the :hover pseudo class on labels			label.hover(				function(){ 					$(this).addClass('hover'); 					if(inputType == 'checkbox' && input.is(':checked')){ 						$(this).addClass('checkedHover'); 					} 				},				function(){ $(this).removeClass('hover checkedHover'); }			);			//bind custom event, trigger it, bind click,focus,blur events								input.bind('updateState', function(){					if (input.is(':checked')) {					if (input.is(':radio')) {										allInputs.each(function(){							$('label[for='+$(this).attr('id')+']').removeClass('checked');						});							};					label.addClass('checked');				}				else { label.removeClass('checked checkedHover checkedFocus'); }			})			.trigger('updateState')			.click(function(){ 				$(this).trigger('updateState'); 			})			.focus(function(){ 				label.addClass('focus'); 				if(inputType == 'checkbox' && input.is(':checked')){ 					$(this).addClass('checkedFocus'); 				} 			})			.blur(function(){ label.removeClass('focus checkedFocus'); });		}	});};$(document).ready(function(){	$('body').addClass('has-js');		/* Button prev */	$('.b-button-prev').bind('mousedown', function () {		$(this).addClass('active');	});	$('.b-button-prev').bind('mouseup', function () {		$(this).removeClass('active');	});			/* Custom Input */	$('input').not('.b-sort__helper').customInput();		/* Popup */	$('.popup-handle').bind('click', function(){		getPopup($(this), $(this).attr('rel'))				return false;	})			/* Button */	$('.b-button')	.add('.b-button-prev')	.add('.b-button-file')	.add('.b-vote__like')	.add('.b-vote__notlike')		.not('.disabled')		.bind('click', function(){			$(this).blur();			return false		})		/* Gradient text */	$('#now-brief').gradientText({colors: ['#666', '#999', '#ccc']});		/* Tabs */		$('.b-tabs dl > dt').bind('click', function(){		$(this)			.siblings().removeClass('selected').end()			.next('dd').andSelf().addClass('selected');	})		/* Cusel */	var params = {		changedEl:".b-form__field .f-select select",		visRows:50,		scrollArrows:false	}	try {		cuSel(params);	}	catch(err){	}	$('.cusel').bind('click', function(){		$('.cuselOpen').not($(this)).removeClass('cuselOpen');	})	/* Toggle */	function Toggle(lnk, block, text) {		lnk.bind('click', function(){			if (block.is(':hidden')) {				text.empty().text('Скрыть');				block.slideDown('fast');				return false;			} else {				text.empty().text('Показать');				block.slideUp('fast');				return false;			}		})	}	$('.js-toggle').each(function(){		var lnk = $(this).find('.b-pseudolink');		var block = $(this).next('div');		var text = lnk.find('.js-toggle-text');		Toggle(lnk, block, text);	})			$('.js-toggle2-container').each(function(){		var lnk = $(this).find('.js-toggle2-lnk');		var block = $(this).find('.js-toggle2-block');		var text = $(this).find('.js-toggle2-text');				Toggle(lnk, block, text);	})		/* Change text */	$('.js-changable').each(function(){		var ctrl = $(this).find('.js-ctrl');		var text = $(this).find('.js-text');		var currentField = $(this).parents('.b-form__field');		var nextField = currentField.next('.b-form__field');		var input = nextField.find('.js-input');				ctrl.bind('click', function(){			currentField.hide();			nextField.show();			input.focus().select();		})	})			/* Advertising */	$('.b-adv__close').bind('click', function(){		$(this).parents('.b-adv').hide();	})			/* Dropdown */	$('.b-dropdown__handle').bind('click', function(){		$(this).parents('.b-dropdown').toggleClass('b-dropdown_open');		return false;	})		$('.b-gallery_ui .b-gallery__item, .b-announs_movie_ui .announ-item').hover(function(){}, function(){		$(this).find('.b-dropdown_open').removeClass('b-dropdown_open');	})});